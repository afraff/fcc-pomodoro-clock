{"version":3,"sources":["Components/SetTimer.js","Components/Timer.js","Components/Controls.js","App.js","serviceWorker.js","index.js"],"names":["setTimer","props","react_default","a","createElement","className","id","concat","type","label","onClick","handleClick","value","timer","mode","time","controls","handlePlayPause","active","handleReset","App","state","breakValue","sessionValue","touched","setTimersHandler","inc","_this","setState","Object","defineProperty","playPauseHandler","clearInterval","pomodoro","setInterval","resetHandler","audio","pause","currentTime","prevProps","prevState","this","play","_this2","SetTimer","Timer","moment","format","Controls","src","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.005f34be.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst setTimer = (props) => (\r\n    <div className='setTimer'>\r\n        <h2 id={`${props.type}-label`}>{props.label}</h2>\r\n        <div className='SetTimer-controls'>\r\n            <button id={`${props.type}-decrement`} onClick={() => props.handleClick(false, `${props.type}Value`)}>-</button>\r\n            <p id={`${props.type}-length`}>{props.value}</p>\r\n            <button id={`${props.type}-increment`} onClick={() => props.handleClick(true, `${props.type}Value`)}>+</button>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default setTimer;","import React from 'react';\r\n\r\nconst timer = (props) => (\r\n    <div className='Timer'>\r\n        <h2 id='timer-label'>{props.mode === 'session' ? 'Session ' : 'Break '}</h2>\r\n        <p id='time-left'>{props.time}</p>\r\n    </div>\r\n);\r\n\r\nexport default timer;","import React from 'react';\r\n\r\nconst controls = (props) => (\r\n    <div className='Controls'>\r\n        <button id='start_stop' onClick={props.handlePlayPause}>{ props.active ? <span>&#10074;&#10074;</span> : <span>&#9658;</span> }</button>\r\n        <button id='reset' onClick={props.handleReset}>&#8635;</button>\r\n  </div>\r\n);\r\n\r\nexport default controls;","import React, { Component } from 'react';\nimport './App.css';\nimport moment from 'moment';\n\nimport SetTimer from './Components/SetTimer';\nimport Timer from './Components/Timer';\nimport Controls from './Components/Controls';\n\nclass App extends Component {\n  state = {\n    breakValue: 5,\n    sessionValue: 25,\n    mode: 'session',\n    time: 25 * 60 * 1000,\n    active: false,\n    touched: false\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.time === 0 && prevState.mode === 'session') {\n      this.setState({ time: this.state.breakValue * 60 * 1000, mode: 'break' })\n      this.audio.play()\n    }\n    if (prevState.time === 0 && prevState.mode === 'break') {\n      this.setState({ time: this.state.sessionValue * 60 * 1000, mode: 'session' })\n      this.audio.play()\n    }\n  }\n\n  setTimersHandler = (inc, type) => {\n    if (inc && this.state[type] === 60) return\n    if (!inc && this.state[type] === 1) return\n    this.setState({ [type]: this.state[type] + (inc ? 1 : -1) })\n  }\n\n  playPauseHandler = () => {\n    if (this.state.active) {\n      this.setState({ active: false }, () => clearInterval(this.pomodoro))\n    } \n    else {\n      if (!this.state.touched) {\n        this.setState({ \n          time: this.state.sessionValue * 60 * 1000, \n          active: true, \n          touched: true }, () => this.pomodoro = setInterval(() => this.setState({ time: this.state.time - 1000 }) ,1000)\n        )} else {\n            this.setState({\n              active: true,\n              touched: true\n            }, () => this.pomodoro = setInterval(() => this.setState({ time: this.state.time - 1000 }) ,1000))\n        }\n    }\n  }\n\n  resetHandler = () => {\n    this.setState({ \n      breakValue: 5, \n      sessionValue: 25, \n      time: 25 * 60 * 1000, \n      active: false, \n      mode: 'session',\n      touched: false\n    })\n    this.audio.pause()\n    this.audio.currentTime = 0\n    clearInterval(this.pomodoro)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 id='header'>Pomodoro Clock</h1>\n        <SetTimer \n          label='Session Length'\n          type='session'\n          value={this.state.sessionValue}\n          handleClick={this.setTimersHandler} />\n        <SetTimer \n          label='Break Length'\n          type='break'\n          value={this.state.breakValue}\n          handleClick={this.setTimersHandler} />\n        <div id='tomato'>\n        <Timer\n          mode={this.state.mode}\n          time={moment(this.state.time).format('mm:ss')} />\n        <Controls \n          active={this.state.active}\n          handleReset={this.resetHandler}\n          handlePlayPause={this.playPauseHandler}/>\n        </div>\n        <audio \n          id='beep'\n          src='https://www.myinstants.com/media/sounds/alarm.mp3' \n          ref={ref => this.audio = ref}>\n        </audio>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}